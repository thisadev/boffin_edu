generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CourseCategory {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  description String?
  slug        String   @unique @db.VarChar(100)
  imageUrl    String?  @map("image_url") @db.VarChar(255)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  isActive    Boolean  @default(true) @map("is_active")
  courses     Course[]

  @@map("course_categories")
}

model Course {
  id                    Int                @id @default(autoincrement())
  categoryId            Int                @map("category_id")
  title                 String             @db.VarChar(200)
  shortDescription      String             @map("short_description") @db.VarChar(500)
  longDescription       String?            @map("long_description")
  learningOutcomes      String[]           @map("learning_outcomes")
  prerequisites         String[]
  targetAudience        String?            @map("target_audience")
  slug                  String             @unique @db.VarChar(200)
  featuredImageUrl      String?            @map("featured_image_url") @db.VarChar(255)
  galleryImages         String[]           @map("gallery_images")
  curriculumPdfUrl      String?            @map("curriculum_pdf_url") @db.VarChar(255)
  level                 String?            @db.VarChar(50)
  deliveryMode          String?            @map("delivery_mode") @db.VarChar(50)
  language              String             @default("English") @db.VarChar(50)
  durationWeeks         Int?               @map("duration_weeks")
  durationHours         Int?               @map("duration_hours")
  startDate             DateTime?          @map("start_date") @db.Date
  endDate               DateTime?          @map("end_date") @db.Date
  scheduleDetails       String?            @map("schedule_details")
  regularPrice          Decimal            @map("regular_price") @db.Decimal(10, 2)
  salePrice             Decimal?           @map("sale_price") @db.Decimal(10, 2)
  saleStartDate         DateTime?          @map("sale_start_date") @db.Timestamptz(6)
  saleEndDate           DateTime?          @map("sale_end_date") @db.Timestamptz(6)
  certificationIncluded Boolean            @default(false) @map("certification_included")
  certificationDetails  String?            @map("certification_details")
  metaTitle             String?            @map("meta_title") @db.VarChar(200)
  metaDescription       String?            @map("meta_description") @db.VarChar(500)
  metaKeywords          String?            @map("meta_keywords") @db.VarChar(255)
  status                String             @default("draft") @db.VarChar(50)
  createdAt             DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime           @default(now()) @map("updated_at") @db.Timestamptz(6)
  publishedAt           DateTime?          @map("published_at") @db.Timestamptz(6)
  bundleItems           BundleCourse[]
  discounts             CourseDiscount[]
  faqs                  CourseFaq[]
  instructors           CourseInstructor[]
  modules               CourseModule[]
  reviews               CourseReview[]
  category              CourseCategory     @relation(fields: [categoryId], references: [id])
  registrations         Registration[]

  @@map("courses")
}

model CourseModule {
  id            Int           @id @default(autoincrement())
  courseId      Int           @map("course_id")
  title         String        @db.VarChar(200)
  description   String?
  orderIndex    Int           @map("order_index")
  durationHours Decimal?      @map("duration_hours") @db.Decimal(5, 2)
  isFreePreview Boolean       @default(false) @map("is_free_preview")
  createdAt     DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime      @default(now()) @map("updated_at") @db.Timestamptz(6)
  course        Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  topics        ModuleTopic[]

  @@map("course_modules")
}

model ModuleTopic {
  id                  Int                 @id @default(autoincrement())
  moduleId            Int                 @map("module_id")
  title               String              @db.VarChar(200)
  description         String?
  content             String?
  orderIndex          Int                 @map("order_index")
  durationMinutes     Int?                @map("duration_minutes")
  videoUrl            String?             @map("video_url") @db.VarChar(255)
  audioUrl            String?             @map("audio_url") @db.VarChar(255)
  presentationUrl     String?             @map("presentation_url") @db.VarChar(255)
  additionalResources Json?               @map("additional_resources")
  createdAt           DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime            @default(now()) @map("updated_at") @db.Timestamptz(6)
  learningObjectives  LearningObjective[]
  module              CourseModule        @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@map("module_topics")
}

model LearningObjective {
  id          Int         @id @default(autoincrement())
  topicId     Int         @map("topic_id")
  description String
  orderIndex  Int         @map("order_index")
  createdAt   DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime    @default(now()) @map("updated_at") @db.Timestamptz(6)
  topic       ModuleTopic @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@map("learning_objectives")
}

model Instructor {
  id                Int                @id @default(autoincrement())
  name              String             @db.VarChar(100)
  bio               String?
  profileImageUrl   String?            @map("profile_image_url") @db.VarChar(255)
  expertise         String[]
  email             String?            @db.VarChar(100)
  socialLinks       Json?              @map("social_links")
  createdAt         DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime           @default(now()) @map("updated_at") @db.Timestamptz(6)
  courseInstructors CourseInstructor[]

  @@map("instructors")
}

model CourseInstructor {
  courseId     Int        @map("course_id")
  instructorId Int        @map("instructor_id")
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  course       Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  instructor   Instructor @relation(fields: [instructorId], references: [id], onDelete: Cascade)

  @@id([courseId, instructorId])
  @@map("course_instructors")
}

model CourseDiscount {
  id            Int       @id @default(autoincrement())
  courseId      Int       @map("course_id")
  discountType  String    @map("discount_type") @db.VarChar(50)
  discountValue Decimal   @map("discount_value") @db.Decimal(10, 2)
  startDate     DateTime? @map("start_date") @db.Timestamptz(6)
  endDate       DateTime? @map("end_date") @db.Timestamptz(6)
  isActive      Boolean   @default(true) @map("is_active")
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)
  course        Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("course_discounts")
}

model Coupon {
  id                  Int            @id @default(autoincrement())
  code                String         @unique @db.VarChar(50)
  discountType        String         @map("discount_type") @db.VarChar(50)
  discountValue       Decimal        @map("discount_value") @db.Decimal(10, 2)
  startDate           DateTime?      @map("start_date") @db.Timestamptz(6)
  endDate             DateTime?      @map("end_date") @db.Timestamptz(6)
  maxUses             Int?           @map("max_uses")
  currentUses         Int            @default(0) @map("current_uses")
  minPurchaseAmount   Decimal        @default(0) @map("min_purchase_amount") @db.Decimal(10, 2)
  applicableCourseIds Int[]          @map("applicable_course_ids")
  isActive            Boolean        @default(true) @map("is_active")
  createdAt           DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime       @default(now()) @map("updated_at") @db.Timestamptz(6)
  registrations       Registration[]

  @@map("coupons")
}

model CourseBundle {
  id               Int            @id @default(autoincrement())
  name             String         @db.VarChar(200)
  description      String?
  featuredImageUrl String?        @map("featured_image_url") @db.VarChar(255)
  regularPrice     Decimal        @map("regular_price") @db.Decimal(10, 2)
  bundlePrice      Decimal        @map("bundle_price") @db.Decimal(10, 2)
  startDate        DateTime?      @map("start_date") @db.Timestamptz(6)
  endDate          DateTime?      @map("end_date") @db.Timestamptz(6)
  isActive         Boolean        @default(true) @map("is_active")
  createdAt        DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime       @default(now()) @map("updated_at") @db.Timestamptz(6)
  bundleCourses    BundleCourse[]

  @@map("course_bundles")
}

model BundleCourse {
  bundleId  Int          @map("bundle_id")
  courseId  Int          @map("course_id")
  createdAt DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  bundle    CourseBundle @relation(fields: [bundleId], references: [id], onDelete: Cascade)
  course    Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([bundleId, courseId])
  @@map("bundle_courses")
}

model CourseReview {
  id         Int      @id @default(autoincrement())
  courseId   Int      @map("course_id")
  userId     Int      @map("user_id")
  rating     Int
  reviewText String?  @map("review_text")
  isApproved Boolean  @default(false) @map("is_approved")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("course_reviews")
}

model CourseFaq {
  id         Int      @id @default(autoincrement())
  courseId   Int      @map("course_id")
  question   String
  answer     String
  orderIndex Int      @map("order_index")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("course_faqs")
}

model User {
  id            Int            @id @default(autoincrement())
  firstName     String         @map("first_name") @db.VarChar(100)
  lastName      String         @map("last_name") @db.VarChar(100)
  email         String         @unique @db.VarChar(100)
  password      String?        @db.VarChar(255)
  phone         String?        @db.VarChar(20)
  address       String?        @db.VarChar(255)
  city          String?        @db.VarChar(100)
  state         String?        @db.VarChar(100)
  zipCode       String?        @map("zip_code") @db.VarChar(20)
  country       String?        @db.VarChar(100)
  role          String         @default("student") @db.VarChar(20)
  isActive      Boolean        @default(true) @map("is_active")
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime       @default(now()) @map("updated_at") @db.Timestamptz(6)
  reviews       CourseReview[]
  registrations Registration[]
  uploadedMedia MediaAsset[]

  @@map("users")
}

model Registration {
  id                   Int       @id @default(autoincrement())
  userId               Int       @map("user_id")
  courseId             Int       @map("course_id")
  registrationDate     DateTime  @default(now()) @map("registration_date") @db.Timestamptz(6)
  status               String    @default("pending") @db.VarChar(20)
  couponId             Int?      @map("coupon_id")
  finalPrice           Decimal   @map("final_price") @db.Decimal(10, 2)
  additionalProducts   Json?     @map("additional_products")
  specialRequirements  String?   @map("special_requirements")
  categorySpecificData Json?     @map("category_specific_data")
  educationLevel       String?   @map("education_level") @db.VarChar(100)
  workExperience       String?   @map("work_experience")
  hearAboutUs          String?   @map("hear_about_us") @db.VarChar(100)
  approvedById         Int?      @map("approved_by_id")
  approvalDate         DateTime? @map("approval_date") @db.Timestamptz(6)
  createdAt            DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)
  coupon               Coupon?   @relation(fields: [couponId], references: [id])
  course               Course    @relation(fields: [courseId], references: [id])
  user                 User      @relation(fields: [userId], references: [id])
  testimonials         Testimonial[]

  @@map("registrations")
}

model Testimonial {
  id              String       @id @default(uuid())
  registrationId  Int          @map("registration_id")
  content         String
  rating          Int
  designation     String?
  workplace       String?
  university      String?
  profileImageUrl String?      @map("profile_image_url")
  isActive        Boolean      @default(true) @map("is_active")
  isFeatured      Boolean      @default(false) @map("is_featured")
  createdAt       DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime     @default(now()) @map("updated_at") @db.Timestamptz(6)
  
  registration    Registration @relation(fields: [registrationId], references: [id])

  @@map("testimonials")
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
  AUDIO
}

enum PlaceholderType {
  LOGO
  FAVICON
  FULL_LOGO
  PARTNERSHIP_LOGO
  ACCREDITATION_LOGO
  COURSE_LOGO
  COURSE_IMAGE
  TESTIMONIAL_IMAGE
  PROMO_VIDEO
  HERO_BACKGROUND
  OTHER
}

model MediaAsset {
  id                String                     @id @default(uuid())
  fileName          String                     @map("file_name") @db.VarChar(255)
  originalFileName  String                     @map("original_file_name") @db.VarChar(255)
  fileSize          Int
  mediaType         MediaType                  @map("media_type")
  mimeType          String                     @map("mime_type") @db.VarChar(100)
  storagePath       String                     @map("storage_path") @db.VarChar(500)
  publicUrl         String                     @map("public_url") @db.VarChar(500)
  altText           String?                    @map("alt_text") @db.VarChar(255)
  title             String?                    @db.VarChar(255)
  description       String?
  width             Int?
  height            Int?
  duration          Int?
  uploadedById      Int                        @map("uploaded_by_id")
  createdAt         DateTime                   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime                   @default(now()) @map("updated_at") @db.Timestamptz(6)
  uploadedBy        User                       @relation(fields: [uploadedById], references: [id])
  placeholders      MediaPlaceholderAssignment[]

  @@map("media_assets")
}

model MediaPlaceholder {
  id               Int                         @id @default(autoincrement())
  name             String                      @db.VarChar(100)
  description      String?
  placeholderType  PlaceholderType             @map("placeholder_type")
  context          String?                     @db.VarChar(100)
  contextId        String?                     @map("context_id")
  createdAt        DateTime                    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime                    @default(now()) @map("updated_at") @db.Timestamptz(6)
  mediaAssets      MediaPlaceholderAssignment[]

  @@map("media_placeholders")
}

model MediaPlaceholderAssignment {
  placeholderId  Int              @map("placeholder_id")
  mediaAssetId   String           @map("media_asset_id")
  isActive       Boolean          @default(true) @map("is_active")
  orderIndex     Int              @default(0) @map("order_index")
  createdAt      DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime         @default(now()) @map("updated_at") @db.Timestamptz(6)
  placeholder    MediaPlaceholder  @relation(fields: [placeholderId], references: [id], onDelete: Cascade)
  mediaAsset     MediaAsset       @relation(fields: [mediaAssetId], references: [id], onDelete: Cascade)

  @@id([placeholderId, mediaAssetId])
  @@map("media_placeholder_assignments")
}
